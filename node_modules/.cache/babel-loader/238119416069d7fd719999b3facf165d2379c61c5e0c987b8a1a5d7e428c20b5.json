{"ast":null,"code":"import { BOARD_CLICK, RESTART, SET_GAME_TYPE, UPDATE_SCORE } from \"../actions/constants\";\nimport { SIZE_TEN } from \"../components/constants\";\nfunction initialStateFunc() {\n  const initialState = {\n    freePlay: false,\n    user_board: buildBoard(),\n    ai_board: buildBoard(),\n    aiPlayed: true,\n    aiScore: 0,\n    playerScore: 0,\n    freePlayScore: 0\n  };\n  return initialState;\n}\nfunction buildBoard() {\n  let arr = [];\n  for (let i = 0; i < 10; i++) {\n    arr.push(buildinitialRows());\n  }\n  arr = putShipsOnBoard(arr);\n  return arr;\n}\nfunction buildinitialRows() {\n  let row = [];\n  for (let i = 0; i < 10; i++) {\n    row.push(buildSquare());\n  }\n  return row;\n}\nfunction buildSquare() {\n  let squareState = {\n    hit: false,\n    miss: false,\n    isBoat: false,\n    unselected: true\n  };\n  return squareState;\n}\nfunction putShipsOnBoard(board) {\n  for (let ship in ships) {\n    board = placeOneShip(ship, ships[ship], board);\n  }\n  return board;\n}\n\n// Helper function to place one ship on board\nfunction placeOneShip(shipType, shipSize, board) {\n  let isVertical = getRandomInteger(2);\n  let newRowCol = getRowAndCol(shipSize, isVertical);\n  let randomRow = newRowCol[0];\n  let randomCol = newRowCol[1];\n  while (!shipPlacementValid(randomRow, randomCol, shipSize, isVertical, board)) {\n    newRowCol = getRowAndCol(shipSize, isVertical);\n    randomRow = newRowCol[0];\n    randomCol = newRowCol[1];\n  }\n  board = fillShip(randomRow, randomCol, shipSize, isVertical, board);\n  return board;\n}\n\n// Validates whether the ship overlaps an existing ship in the given player's\n// ship attribute\nfunction shipPlacementValid(row, col, length, isVertical, board) {\n  // check each ship\n  let currRow = row;\n  let currCol = col;\n  for (let i = 0; i < length; i++) {\n    if (isVertical) {\n      if (board[col][currRow].isBoat) {\n        return false;\n      }\n      currRow++;\n    } else {\n      if (board[currCol][row].isBoat) {\n        return false;\n      }\n      currCol++;\n    }\n  }\n  return true;\n}\n\n// Adds the row/col of each ship to the given player's ships attribute\nfunction fillShip(row, col, length, fillVertical, board) {\n  let currRow = row;\n  let currCol = col;\n  for (let i = 0; i < length; i++) {\n    if (fillVertical) {\n      board[col][currRow].isBoat = true;\n      currRow++;\n    } else {\n      board[currCol][row].isBoat = true;\n      currCol++;\n    }\n  }\n  return board;\n}\n\n// Helper function to get random row and column values\nfunction getRowAndCol(shipSize, isVertical) {\n  let rowMax = SIZE_TEN;\n  let colMax = SIZE_TEN;\n  if (isVertical) {\n    rowMax = 9 - shipSize;\n  } else {\n    colMax = 9 - shipSize;\n  }\n  let randomRow = getRandomInteger(rowMax);\n  let randomCol = getRandomInteger(colMax);\n  return [randomRow, randomCol];\n}\n\n// Helper function that returns a random integer between\n// 0 (inclusive) and a given maxInt (exclusive)\nfunction getRandomInteger(maxInt) {\n  return Math.floor(Math.random() * maxInt);\n}\n\n//define a dictionary of ships with respective lengths. \nconst ships = {\n  carrier: 5,\n  battleship: 4,\n  destroyer: 3,\n  submarine: 3,\n  patrolBoat: 2\n};\n\n// // REDUCER STARTS HERE\nexport const BoardReducer = (state, action) => {\n  if (state === undefined) {\n    return initialStateFunc();\n  }\n  if (action.type === BOARD_CLICK) {\n    let board;\n    if (action.payload.enemy) {\n      board = state.ai_board;\n    } else {\n      board = state.user_board;\n    }\n    let boardCopy = board.map(function (arr) {\n      return arr.slice();\n    });\n    let squareCopy = {\n      ...boardCopy[action.payload.row][action.payload.col]\n    };\n    squareCopy.hit = action.payload.hit;\n    squareCopy.miss = action.payload.miss;\n    squareCopy.unselected = action.payload.unselected;\n    boardCopy[action.payload.row][action.payload.col] = squareCopy;\n    if (action.payload.enemy) {\n      return {\n        ...state,\n        ai_board: boardCopy,\n        aiPlayed: false\n      };\n    } else {\n      return {\n        ...state,\n        user_board: boardCopy,\n        aiPlayed: true\n      };\n    }\n  }\n  if (action.type === UPDATE_SCORE) {\n    return {\n      ...state,\n      aiScore: action.payload.aiScore,\n      playerScore: action.payload.playerScore,\n      freePlayScore: action.payload.freePlayScore\n    };\n  }\n  if (action.type === SET_GAME_TYPE) {\n    // if score >=17 reset to 0\n    return {\n      ...state,\n      freePlay: action.payload.gameType === \"normal\" ? false : true,\n      user_board: buildBoard(),\n      ai_board: buildBoard(),\n      aiPlayed: true\n    };\n  }\n  if (action.type === RESTART) {\n    let newUserBoard = [];\n    let newAIBoard = [];\n    newUserBoard = buildBoard();\n    newAIBoard = buildBoard();\n    return {\n      ...state,\n      freePlay: action.payload.isFreePlay,\n      user_board: newUserBoard,\n      ai_board: newAIBoard\n    };\n  }\n  return state;\n};\n_c = BoardReducer;\nvar _c;\n$RefreshReg$(_c, \"BoardReducer\");","map":{"version":3,"names":["BOARD_CLICK","RESTART","SET_GAME_TYPE","UPDATE_SCORE","SIZE_TEN","initialStateFunc","initialState","freePlay","user_board","buildBoard","ai_board","aiPlayed","aiScore","playerScore","freePlayScore","arr","i","push","buildinitialRows","putShipsOnBoard","row","buildSquare","squareState","hit","miss","isBoat","unselected","board","ship","ships","placeOneShip","shipType","shipSize","isVertical","getRandomInteger","newRowCol","getRowAndCol","randomRow","randomCol","shipPlacementValid","fillShip","col","length","currRow","currCol","fillVertical","rowMax","colMax","maxInt","Math","floor","random","carrier","battleship","destroyer","submarine","patrolBoat","BoardReducer","state","action","undefined","type","payload","enemy","boardCopy","map","slice","squareCopy","gameType","newUserBoard","newAIBoard","isFreePlay","_c","$RefreshReg$"],"sources":["/Users/bomendez/Documents/CS5610/Battleship/src/reducers/board.js"],"sourcesContent":["import { BOARD_CLICK, RESTART, SET_GAME_TYPE, UPDATE_SCORE } from \"../actions/constants\";\nimport { SIZE_TEN } from \"../components/constants\";\n\nfunction initialStateFunc() {\n  const initialState = {\n  freePlay: false,\n  user_board: buildBoard(),\n  ai_board: buildBoard(),\n  aiPlayed: true,\n  aiScore: 0,\n  playerScore: 0,\n  freePlayScore: 0,\n  }\n  return initialState\n \n}\n\n  \nfunction buildBoard(){\n  let arr = []\n  for(let i=0; i < 10; i++){\n    arr.push(buildinitialRows())\n  }\n  arr = putShipsOnBoard(arr)\n  return arr\n}\n\n\nfunction buildinitialRows(){\n  let row = []\n  for(let i=0; i< 10; i++){\n    row.push(buildSquare());\n  }\n  return row;\n}\n\n\nfunction buildSquare(){\n    let squareState = {\n      hit:false,\n      miss: false,\n      isBoat: false,\n      unselected: true\n    }\n  return squareState;\n}\n\n\nfunction putShipsOnBoard(board) {\n  for(let ship in ships){\n    board = placeOneShip(ship, ships[ship], board);\n  }\n  return board;\n}\n\n\n// Helper function to place one ship on board\nfunction placeOneShip(shipType, shipSize, board) {\n  let isVertical = getRandomInteger(2);\n\n  let newRowCol = getRowAndCol(shipSize, isVertical);\n  let randomRow = newRowCol[0];\n  let randomCol = newRowCol[1];\n\n  while (!shipPlacementValid(randomRow, randomCol, shipSize, isVertical, board)) {\n    newRowCol = getRowAndCol(shipSize, isVertical);\n    randomRow = newRowCol[0];\n    randomCol = newRowCol[1];\n  }\n  board = fillShip(randomRow, randomCol, shipSize, isVertical, board);\n  return board;\n}\n\n\n// Validates whether the ship overlaps an existing ship in the given player's\n// ship attribute\nfunction shipPlacementValid(row, col, length, isVertical, board) {\n  // check each ship\n  let currRow = row;\n  let currCol = col;\n  for (let i = 0; i < length; i++) {\n    if (isVertical) {\n      if (board[col][currRow].isBoat) {\n        return false;\n      }\n      currRow++;\n    } else {\n      if (board[currCol][row].isBoat) {\n        return false;\n      }\n      currCol++;\n    }\n  }\n  return true;\n}\n\n\n// Adds the row/col of each ship to the given player's ships attribute\nfunction fillShip(row, col, length, fillVertical, board) {\n  let currRow = row;\n  let currCol = col;\n  for (let i = 0; i < length; i++) {\n    if (fillVertical) {\n      board[col][currRow].isBoat = true;\n      currRow++;\n    } else {\n      board[currCol][row].isBoat = true;\n      currCol++;\n    }\n  }\n  return board;\n}\n\n\n// Helper function to get random row and column values\nfunction getRowAndCol(shipSize, isVertical) {\n  let rowMax = SIZE_TEN;\n  let colMax = SIZE_TEN;\n  if (isVertical) {\n    rowMax = 9 - shipSize;\n  } else {\n    colMax = 9 - shipSize;\n  }\n  let randomRow = getRandomInteger(rowMax);\n  let randomCol = getRandomInteger(colMax);\n  return [randomRow, randomCol];\n}\n\n\n// Helper function that returns a random integer between\n// 0 (inclusive) and a given maxInt (exclusive)\nfunction getRandomInteger(maxInt) {\n  return Math.floor(Math.random() * maxInt);\n}\n\n\n\n//define a dictionary of ships with respective lengths. \nconst ships = {\n  carrier: 5,\n  battleship: 4,\n  destroyer: 3,\n  submarine: 3,\n  patrolBoat: 2\n}\n\n  \n// // REDUCER STARTS HERE\nexport const BoardReducer = (state, action) => {\n  if (state === undefined) {\n    return initialStateFunc();\n  }\n  if (action.type === BOARD_CLICK) {\n    let board;\n    if (action.payload.enemy) {\n      board = state.ai_board;\n    } else {\n      board = state.user_board\n    }\n    let boardCopy = board.map(function(arr){\n      return arr.slice();\n    });\n    let squareCopy = { ...boardCopy[action.payload.row][action.payload.col] };\n    squareCopy.hit = action.payload.hit;\n    squareCopy.miss = action.payload.miss;\n    squareCopy.unselected = action.payload.unselected;\n    boardCopy[action.payload.row][action.payload.col] = squareCopy;\n    if (action.payload.enemy) {\n      return {\n        ...state,\n        ai_board : boardCopy,\n        aiPlayed : false\n      }\n    } else {\n      return {\n        ...state,\n        user_board : boardCopy,\n        aiPlayed : true\n      }\n    }\n  }\n  if (action.type === UPDATE_SCORE) {\n    return {\n      ...state,\n      aiScore: action.payload.aiScore,\n      playerScore: action.payload.playerScore,\n      freePlayScore: action.payload.freePlayScore,\n    }\n  }\n  if (action.type === SET_GAME_TYPE){\n    // if score >=17 reset to 0\n     return {\n     ...state,\n     freePlay : action.payload.gameType === \"normal\" ? false : true,\n     user_board: buildBoard(),\n     ai_board: buildBoard(),\n     aiPlayed: true\n     }\n  }\n  if (action.type === RESTART) {\n    let newUserBoard = []\n    let newAIBoard = []\n    newUserBoard = buildBoard()\n    newAIBoard = buildBoard()\n    return {\n      ...state,\n      freePlay: action.payload.isFreePlay,\n      user_board: newUserBoard,\n      ai_board: newAIBoard,\n    }\n  }\n   return state;\n};\n\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,OAAO,EAAEC,aAAa,EAAEC,YAAY,QAAQ,sBAAsB;AACxF,SAASC,QAAQ,QAAQ,yBAAyB;AAElD,SAASC,gBAAgBA,CAAA,EAAG;EAC1B,MAAMC,YAAY,GAAG;IACrBC,QAAQ,EAAE,KAAK;IACfC,UAAU,EAAEC,UAAU,EAAE;IACxBC,QAAQ,EAAED,UAAU,EAAE;IACtBE,QAAQ,EAAE,IAAI;IACdC,OAAO,EAAE,CAAC;IACVC,WAAW,EAAE,CAAC;IACdC,aAAa,EAAE;EACf,CAAC;EACD,OAAOR,YAAY;AAErB;AAGA,SAASG,UAAUA,CAAA,EAAE;EACnB,IAAIM,GAAG,GAAG,EAAE;EACZ,KAAI,IAAIC,CAAC,GAAC,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAC;IACvBD,GAAG,CAACE,IAAI,CAACC,gBAAgB,EAAE,CAAC;EAC9B;EACAH,GAAG,GAAGI,eAAe,CAACJ,GAAG,CAAC;EAC1B,OAAOA,GAAG;AACZ;AAGA,SAASG,gBAAgBA,CAAA,EAAE;EACzB,IAAIE,GAAG,GAAG,EAAE;EACZ,KAAI,IAAIJ,CAAC,GAAC,CAAC,EAAEA,CAAC,GAAE,EAAE,EAAEA,CAAC,EAAE,EAAC;IACtBI,GAAG,CAACH,IAAI,CAACI,WAAW,EAAE,CAAC;EACzB;EACA,OAAOD,GAAG;AACZ;AAGA,SAASC,WAAWA,CAAA,EAAE;EAClB,IAAIC,WAAW,GAAG;IAChBC,GAAG,EAAC,KAAK;IACTC,IAAI,EAAE,KAAK;IACXC,MAAM,EAAE,KAAK;IACbC,UAAU,EAAE;EACd,CAAC;EACH,OAAOJ,WAAW;AACpB;AAGA,SAASH,eAAeA,CAACQ,KAAK,EAAE;EAC9B,KAAI,IAAIC,IAAI,IAAIC,KAAK,EAAC;IACpBF,KAAK,GAAGG,YAAY,CAACF,IAAI,EAAEC,KAAK,CAACD,IAAI,CAAC,EAAED,KAAK,CAAC;EAChD;EACA,OAAOA,KAAK;AACd;;AAGA;AACA,SAASG,YAAYA,CAACC,QAAQ,EAAEC,QAAQ,EAAEL,KAAK,EAAE;EAC/C,IAAIM,UAAU,GAAGC,gBAAgB,CAAC,CAAC,CAAC;EAEpC,IAAIC,SAAS,GAAGC,YAAY,CAACJ,QAAQ,EAAEC,UAAU,CAAC;EAClD,IAAII,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC;EAC5B,IAAIG,SAAS,GAAGH,SAAS,CAAC,CAAC,CAAC;EAE5B,OAAO,CAACI,kBAAkB,CAACF,SAAS,EAAEC,SAAS,EAAEN,QAAQ,EAAEC,UAAU,EAAEN,KAAK,CAAC,EAAE;IAC7EQ,SAAS,GAAGC,YAAY,CAACJ,QAAQ,EAAEC,UAAU,CAAC;IAC9CI,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC;IACxBG,SAAS,GAAGH,SAAS,CAAC,CAAC,CAAC;EAC1B;EACAR,KAAK,GAAGa,QAAQ,CAACH,SAAS,EAAEC,SAAS,EAAEN,QAAQ,EAAEC,UAAU,EAAEN,KAAK,CAAC;EACnE,OAAOA,KAAK;AACd;;AAGA;AACA;AACA,SAASY,kBAAkBA,CAACnB,GAAG,EAAEqB,GAAG,EAAEC,MAAM,EAAET,UAAU,EAAEN,KAAK,EAAE;EAC/D;EACA,IAAIgB,OAAO,GAAGvB,GAAG;EACjB,IAAIwB,OAAO,GAAGH,GAAG;EACjB,KAAK,IAAIzB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG0B,MAAM,EAAE1B,CAAC,EAAE,EAAE;IAC/B,IAAIiB,UAAU,EAAE;MACd,IAAIN,KAAK,CAACc,GAAG,CAAC,CAACE,OAAO,CAAC,CAAClB,MAAM,EAAE;QAC9B,OAAO,KAAK;MACd;MACAkB,OAAO,EAAE;IACX,CAAC,MAAM;MACL,IAAIhB,KAAK,CAACiB,OAAO,CAAC,CAACxB,GAAG,CAAC,CAACK,MAAM,EAAE;QAC9B,OAAO,KAAK;MACd;MACAmB,OAAO,EAAE;IACX;EACF;EACA,OAAO,IAAI;AACb;;AAGA;AACA,SAASJ,QAAQA,CAACpB,GAAG,EAAEqB,GAAG,EAAEC,MAAM,EAAEG,YAAY,EAAElB,KAAK,EAAE;EACvD,IAAIgB,OAAO,GAAGvB,GAAG;EACjB,IAAIwB,OAAO,GAAGH,GAAG;EACjB,KAAK,IAAIzB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG0B,MAAM,EAAE1B,CAAC,EAAE,EAAE;IAC/B,IAAI6B,YAAY,EAAE;MAChBlB,KAAK,CAACc,GAAG,CAAC,CAACE,OAAO,CAAC,CAAClB,MAAM,GAAG,IAAI;MACjCkB,OAAO,EAAE;IACX,CAAC,MAAM;MACLhB,KAAK,CAACiB,OAAO,CAAC,CAACxB,GAAG,CAAC,CAACK,MAAM,GAAG,IAAI;MACjCmB,OAAO,EAAE;IACX;EACF;EACA,OAAOjB,KAAK;AACd;;AAGA;AACA,SAASS,YAAYA,CAACJ,QAAQ,EAAEC,UAAU,EAAE;EAC1C,IAAIa,MAAM,GAAG1C,QAAQ;EACrB,IAAI2C,MAAM,GAAG3C,QAAQ;EACrB,IAAI6B,UAAU,EAAE;IACda,MAAM,GAAG,CAAC,GAAGd,QAAQ;EACvB,CAAC,MAAM;IACLe,MAAM,GAAG,CAAC,GAAGf,QAAQ;EACvB;EACA,IAAIK,SAAS,GAAGH,gBAAgB,CAACY,MAAM,CAAC;EACxC,IAAIR,SAAS,GAAGJ,gBAAgB,CAACa,MAAM,CAAC;EACxC,OAAO,CAACV,SAAS,EAAEC,SAAS,CAAC;AAC/B;;AAGA;AACA;AACA,SAASJ,gBAAgBA,CAACc,MAAM,EAAE;EAChC,OAAOC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAGH,MAAM,CAAC;AAC3C;;AAIA;AACA,MAAMnB,KAAK,GAAG;EACZuB,OAAO,EAAE,CAAC;EACVC,UAAU,EAAE,CAAC;EACbC,SAAS,EAAE,CAAC;EACZC,SAAS,EAAE,CAAC;EACZC,UAAU,EAAE;AACd,CAAC;;AAGD;AACA,OAAO,MAAMC,YAAY,GAAGA,CAACC,KAAK,EAAEC,MAAM,KAAK;EAC7C,IAAID,KAAK,KAAKE,SAAS,EAAE;IACvB,OAAOvD,gBAAgB,EAAE;EAC3B;EACA,IAAIsD,MAAM,CAACE,IAAI,KAAK7D,WAAW,EAAE;IAC/B,IAAI2B,KAAK;IACT,IAAIgC,MAAM,CAACG,OAAO,CAACC,KAAK,EAAE;MACxBpC,KAAK,GAAG+B,KAAK,CAAChD,QAAQ;IACxB,CAAC,MAAM;MACLiB,KAAK,GAAG+B,KAAK,CAAClD,UAAU;IAC1B;IACA,IAAIwD,SAAS,GAAGrC,KAAK,CAACsC,GAAG,CAAC,UAASlD,GAAG,EAAC;MACrC,OAAOA,GAAG,CAACmD,KAAK,EAAE;IACpB,CAAC,CAAC;IACF,IAAIC,UAAU,GAAG;MAAE,GAAGH,SAAS,CAACL,MAAM,CAACG,OAAO,CAAC1C,GAAG,CAAC,CAACuC,MAAM,CAACG,OAAO,CAACrB,GAAG;IAAE,CAAC;IACzE0B,UAAU,CAAC5C,GAAG,GAAGoC,MAAM,CAACG,OAAO,CAACvC,GAAG;IACnC4C,UAAU,CAAC3C,IAAI,GAAGmC,MAAM,CAACG,OAAO,CAACtC,IAAI;IACrC2C,UAAU,CAACzC,UAAU,GAAGiC,MAAM,CAACG,OAAO,CAACpC,UAAU;IACjDsC,SAAS,CAACL,MAAM,CAACG,OAAO,CAAC1C,GAAG,CAAC,CAACuC,MAAM,CAACG,OAAO,CAACrB,GAAG,CAAC,GAAG0B,UAAU;IAC9D,IAAIR,MAAM,CAACG,OAAO,CAACC,KAAK,EAAE;MACxB,OAAO;QACL,GAAGL,KAAK;QACRhD,QAAQ,EAAGsD,SAAS;QACpBrD,QAAQ,EAAG;MACb,CAAC;IACH,CAAC,MAAM;MACL,OAAO;QACL,GAAG+C,KAAK;QACRlD,UAAU,EAAGwD,SAAS;QACtBrD,QAAQ,EAAG;MACb,CAAC;IACH;EACF;EACA,IAAIgD,MAAM,CAACE,IAAI,KAAK1D,YAAY,EAAE;IAChC,OAAO;MACL,GAAGuD,KAAK;MACR9C,OAAO,EAAE+C,MAAM,CAACG,OAAO,CAAClD,OAAO;MAC/BC,WAAW,EAAE8C,MAAM,CAACG,OAAO,CAACjD,WAAW;MACvCC,aAAa,EAAE6C,MAAM,CAACG,OAAO,CAAChD;IAChC,CAAC;EACH;EACA,IAAI6C,MAAM,CAACE,IAAI,KAAK3D,aAAa,EAAC;IAChC;IACC,OAAO;MACP,GAAGwD,KAAK;MACRnD,QAAQ,EAAGoD,MAAM,CAACG,OAAO,CAACM,QAAQ,KAAK,QAAQ,GAAG,KAAK,GAAG,IAAI;MAC9D5D,UAAU,EAAEC,UAAU,EAAE;MACxBC,QAAQ,EAAED,UAAU,EAAE;MACtBE,QAAQ,EAAE;IACV,CAAC;EACJ;EACA,IAAIgD,MAAM,CAACE,IAAI,KAAK5D,OAAO,EAAE;IAC3B,IAAIoE,YAAY,GAAG,EAAE;IACrB,IAAIC,UAAU,GAAG,EAAE;IACnBD,YAAY,GAAG5D,UAAU,EAAE;IAC3B6D,UAAU,GAAG7D,UAAU,EAAE;IACzB,OAAO;MACL,GAAGiD,KAAK;MACRnD,QAAQ,EAAEoD,MAAM,CAACG,OAAO,CAACS,UAAU;MACnC/D,UAAU,EAAE6D,YAAY;MACxB3D,QAAQ,EAAE4D;IACZ,CAAC;EACH;EACC,OAAOZ,KAAK;AACf,CAAC;AAACc,EAAA,GAhEWf,YAAY;AAAA,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}